All the Projects are placed in this repository.
https://github.com/InvalidSB/Javascript-Reactjs-Training-GCA-/tree/master

IF you want to see the Output of those project directly ,
Please Check the 3AsignmentSS folder out there...
and open the corresponding image. !!!!!



//React js ToDoApp +Material UI and firebase for storage.
//User can add his work to do ,it get saved with coresponding date.
//user can also modify and delete his todos work.


//The files below are from same directory(src folder) and rest of folders/files are as same as default .


#App.js ---------------------

import React, { useState } from "react";
import "./App.css";
import { TextField, Button } from "@material-ui/core";
import moment from "moment";
import firebase from "firebase";
import ListTodo from "./ListTodo";

export default function App() {
  const [value, setValue] = useState();
  // const [time, setTime] = useState("");
  // const [todoValue, setTodoValue] = useState("");

  const addTodo = (event) => {
    event.preventDefault();

    // setTodoValue(value);
    // setTime(moment().format("MMMM Do YYYY, h:mm:ss a"));

    // for firebase

    const firestore = firebase.firestore();

    firestore
      .collection("todo")
      .add({
        todo: value,
        date: moment().format("MMMM Do YYYY, h:mm:ss a"),
      })
      .then(() => {
        console.log("Todo Added");
        window.location.reload();
      });
  };

  const textChange = (event) => {
    setValue(event.target.value);
  };

  // firebase Configuration for todoapp
  var firebaseConfig = {
    apiKey: "AIzaSyAtiS7prQzYl2fr_KNlvzLl-FZPTyUTNCE",
    authDomain: "todoapp-react-63b26.firebaseapp.com",
    projectId: "todoapp-react-63b26",
    storageBucket: "todoapp-react-63b26.appspot.com",
    messagingSenderId: "624975785412",
    appId: "1:624975785412:web:45a8a0f18e6f9a54d78891",
    measurementId: "G-BFCHJCLKNQ",
  };
  // Initialize Firebase
  if (!firebase.apps.length) {
    firebase.initializeApp(firebaseConfig);
  }
  return (
    <>
    <h1 className="heading">Todo App</h1>
    <div className="todoApp">
      <form>
        <TextField
          id="filled-size-small"
          value={value}
          placeholder="Add a Todo"
          variant="outlined"
          size="small"
          onChange={textChange}
        />
        &nbsp;&nbsp;&nbsp;
        <Button
          onClick={addTodo}
          variant="contained"
          color="secondary"
          size="large"
        >
          Add
        </Button>
      </form>
      <br />
      <ListTodo />
    </div>
    </>
  );
}





#Package.json --------------------

{
  "name": "todoappreact",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@material-ui/core": "^4.11.2",
    "@material-ui/icons": "^4.11.2",
    "@testing-library/jest-dom": "^5.11.6",
    "@testing-library/react": "^11.2.2",
    "@testing-library/user-event": "^12.6.0",
    "firebase": "^8.2.1",
    "moment": "^2.29.1",
    "react": "^17.0.1",
    "react-dom": "^17.0.1",
    "react-scripts": "4.0.1",
    "web-vitals": "^0.2.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}






#ListTodo.js

import React, { useEffect, useState } from "react";
import firebase from "firebase";
import {
  List,
  ListItem,
  ListItemAvatar,
  Avatar,
  ListItemText,
  Grid,
} from "@material-ui/core";
import TodayIcon from "@material-ui/icons/Today";
import DeleteIcon from "@material-ui/icons/Delete";
import EditIcon from "@material-ui/icons/Edit";
import UpdateData from "./UpdateData";

export default function ListTodo() {
  const [allTodos, setAllToDos] = useState([]);
  const [loaded, setLoaded] = useState(false);
  const [isModalOpen, setModalOpen] = useState(false);

  const [id, setId] = useState("");
  const [tododata, setTododata] = useState("");
  const [date, setDate] = useState("");

  const getData = async () => {
    const dataReceived = await firebase
      .firestore()
      .collection("todo")
      .orderBy("date", "desc")
      .get();
    return dataReceived.docs.map((doc) => doc);
  };

  useEffect(() => {
    getData().then((data) => {
      console.log(data);

      setAllToDos(data);
      setLoaded(true);
    });
  }, []);

  const deleteTodo = (id) => {
    console.log("delete");
    firebase
      .firestore()
      .collection("todo")
      .doc(id)
      .delete()
      .then(() => {
        console.log("Document successfully deleted!");
        window.location.reload();
      });
  };

  const updateTodo = (id, todo, date) => {
    console.log(id);
    setId(id);
    setTododata(todo);
    setDate(date);
    setModalOpen(true);
  };

  const modalClose = () => {
    setModalOpen(false);
  };

  const SecondaryTextColor = {
    color: "blue",
  };
  const PrimaryTextColor = {
    color: "black",
    fontWeight: "bold",
  };

  return (
    <div>
      <UpdateData
        isModalOpen={isModalOpen}
        modalClose={modalClose}
        id={id}
        todo={tododata}
        date={date}
      />
      {loaded ? (
        <div className="todo">
          <Grid container spacing={3}>
            <List>
              {allTodos.map((todo) => (
                <ListItem
                  style={{ justifyContent: "space-between", width: "110%" }}
                  key={todo.id}
                >
                  <ListItemAvatar>
                    <Avatar>
                      <TodayIcon style={{ color: "black" }} />
                    </Avatar>
                  </ListItemAvatar>
                  <ListItemText
                    primary={todo.data().todo}
                    secondary={todo.data().date}
                    secondaryTypographyProps={{ style: SecondaryTextColor }}
                    primaryTypographyProps={{ style: PrimaryTextColor }}
                  />

                  <div style={{ paddingLeft: 30 }}>
                    <Avatar
                      style={{
                        backgroundColor: "transparent",
                        justifyContent: "space-between",
                        width: 50,
                      }}
                    >
                      <EditIcon
                        onClick={() =>
                          updateTodo(
                            todo.id,
                            todo.data().todo,
                            todo.data().date
                          )
                        }
                        fontSize="small"
                        color="primary"
                      />

                      <DeleteIcon
                        onClick={() => deleteTodo(todo.id)}
                        fontSize="small"
                        color="secondary"
                      />
                    </Avatar>
                  </div>
                </ListItem>
              ))}
            </List>
          </Grid>
        </div>
      ) : null}
    </div>
  );
}





#UpdateData.js

import React, { useState } from "react";
import {
  Dialog,
  DialogTitle,
  TextField,
  DialogContent,
  DialogContentText,
  DialogActions,
  Button,
} from "@material-ui/core";
import firebase from "firebase";
import moment from "moment";

export default function UpdateData(props) {
  const [value, setValue] = useState();

  const updateTodoFirebase = (id) => {
    firebase
      .firestore()
      .collection("todo")
      .doc(id)
      .update({
        todo: value,
        date: moment().format("MMMM Do YYYY, h:mm:ss a"),
      })
      .then(() => {
        console.log("Document successfully updated!");
        window.location.reload();
      });
  };

  const updatedData = (event) => {
    setValue(event.target.value);
  };
  return (
    <div>
      <Dialog
        open={props.isModalOpen}
        onClose={props.modalClose}
        aria-labelledby="form-dialog-title"
      >
        <DialogTitle id="form-dialog-title">You want to Update??</DialogTitle>
        <DialogContent>
          <DialogContentText>{props.todo}</DialogContentText>
          <TextField
            autoFocus
            margin="dense"
            id={props.id}
            label="Updated Todo"
            type="text"
            fullWidth
            value={value}
            onChange={updatedData}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={props.modalClose} color="primary">
            Discard
          </Button>
          <Button onClick={() => updateTodoFirebase(props.id)} color="primary">
            Done
          </Button>
        </DialogActions>
      </Dialog>
    </div>
  );
}




#app.css

:root{
  justify-content: center;
  align-items: center;
}
.heading{
  text-align: center;
  margin-top: 40px;
}
.todoApp {
  text-align: center;
  align-items: baseline;
  margin:100px 150px;
  padding:50px;
  border:3px solid black;
}


.todo {
  align-items: center;
  text-align: center;
  margin-left: 33.33%;
}




#index.css 


body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",
    "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background:linear-gradient(45deg,rgb(255, 166, 0),red);
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",
    monospace;
}




